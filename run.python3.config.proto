mode: ONCE
hostname: "sandbox"
cwd: "/app"

# Time and resource limits
time_limit: 30
max_cpus: 1

# Memory limits (in MB)
rlimit_as: 256
rlimit_core: 0
rlimit_cpu: 10
rlimit_fsize: 5
rlimit_nofile: 64

# Process limits
rlimit_nproc: 16
rlimit_stack: 8

# Network isolation - disabled in Docker
clone_newnet: false

# Filesystem isolation
clone_newns: true
clone_newpid: true
clone_newipc: true
clone_newuts: true
clone_newcgroup: false

# User/group isolation - simplified for Docker
clone_newuser: false
keep_caps: false

# Mount points for Python runtime
mount {
  src: "/usr"
  dst: "/usr"
  is_bind: true
  rw: false
}

mount {
  src: "/lib"
  dst: "/lib"
  is_bind: true
  rw: false
}

mount {
  src: "/lib64"
  dst: "/lib64"
  is_bind: true
  rw: false
  mandatory: false
}

mount {
  src: "/bin"
  dst: "/bin"
  is_bind: true
  rw: false
}

# Virtual environment (contains all Python packages)
mount {
  src: "/opt/venv"
  dst: "/opt/venv"
  is_bind: true
  rw: false
}

# Working directory (read-write for user scripts)
mount {
  src: "/app"
  dst: "/app"
  is_bind: true
  rw: true
}

# Temporary directory - create a confined tmp
mount {
  dst: "/tmp"
  fstype: "tmpfs"
  rw: true
  options: "size=10m,nr_inodes=1024"
}

# /proc filesystem (minimal)
mount {
  dst: "/proc"
  fstype: "proc"
  rw: false
}

# /dev with essential devices only
mount {
  dst: "/dev"
  fstype: "tmpfs"
  rw: true
  options: "size=1m,nr_inodes=128"
}

mount {
  src: "/dev/null"
  dst: "/dev/null"
  rw: true
  is_bind: true
}

mount {
  src: "/dev/zero"
  dst: "/dev/zero"
  rw: true
  is_bind: true
}

mount {
  src: "/dev/urandom"
  dst: "/dev/urandom"
  rw: true
  is_bind: true
}

# Environment variables
envar: "PATH=/opt/venv/bin:/usr/bin:/bin"
envar: "PYTHONDONTWRITEBYTECODE=1"
envar: "PYTHONUNBUFFERED=1"

# Security settings for Docker environment
disable_no_new_privs: false